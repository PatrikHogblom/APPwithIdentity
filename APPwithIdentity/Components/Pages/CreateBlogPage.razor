@page "/createblog"
@using APPwithIdentity.Service
@using APPwithIdentity.Models.Entities
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms;

@rendermode InteractiveServer

<h3>Create Blog</h3>

<EditForm Model="@newBlog" OnValidSubmit="CreateBlog" FormName="createForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="header" class="form-control" @bind-Value="newBlog.Header" />
    <InputText id="text" class="form-control" @bind-Value="newBlog.Text" />
    <button type="submit" class="btn btn-primary">Create Blog</button>
</EditForm>

@code {
    Blog newBlog = new Blog();

    [Inject]
    public IService blogService { get; set; }

    [Inject]
    public NavigationManager navigationManager { get; set; }

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    async Task CreateBlog()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            Console.WriteLine("userId: " + newBlog.UserId);
            Console.WriteLine("header: " + newBlog.Header);
            Console.WriteLine("text: " + newBlog.Text);
            Console.WriteLine("image: " + newBlog.Image);

            await blogService.AddAsync(newBlog, user);
            navigationManager.NavigateTo("/blogs");
        }
        catch (Exception ex)
        {
            // Handle exception appropriately
            Console.WriteLine($"Error creating blog: {ex.Message}");
        }
    }

    // Validate the Blog object before submission
    private bool IsValid(Blog blog)
    {
        if (string.IsNullOrWhiteSpace(blog.Header) || string.IsNullOrWhiteSpace(blog.Text))
        {
            // Perform additional validation if needed
            return false;
        }
        return true;
    }
}
